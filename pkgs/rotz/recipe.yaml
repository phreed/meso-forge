# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json
schema_version: 1

context:
  version: "1.2.1"

package:
  name: rotz
  version: ${{ version }}

source:
  url: https://github.com/volllly/rotz/archive/refs/tags/v${{ version }}.tar.gz
  sha256: 61bae45578e988c627a8db36fcc934d8d21e30735f576c77312ba7dd66fd99bb

build:
  number: 0
  script:
    interpreter: bash
    content: |
      # Build rotz with all format support
      cargo install --root $PREFIX --path . --features all-formats

      # Generate third-party licenses
      cargo bundle-licenses --format yaml --output thirdpartylicenses.yaml

      # Generate shell completions
      mkdir -p $PREFIX/share/bash-completion/completions
      mkdir -p $PREFIX/share/fish/vendor_completions.d
      mkdir -p $PREFIX/share/zsh/site-functions

      # Generate completions using the installed binary
      $PREFIX/bin/rotz completions bash > $PREFIX/share/bash-completion/completions/rotz
      $PREFIX/bin/rotz completions fish > $PREFIX/share/fish/vendor_completions.d/rotz.fish
      $PREFIX/bin/rotz completions zsh > $PREFIX/share/zsh/site-functions/_rotz

requirements:
  build:
    - rust
    - cargo-bundle-licenses
  host:
    - openssl

tests:
  # Test 1: Verify package contents are included
  - package_contents:
      files:
        # rotz binary
        - bin/rotz${{ ".exe" if win }}
        # Shell completions
        - share/bash-completion/completions/rotz
        - share/fish/vendor_completions.d/rotz.fish
        - share/zsh/site-functions/_rotz

  # Test 2: Basic functionality test
  - script:
      interpreter: bash
      content: |
        # Test that rotz can show help
        rotz --help

        # Test that rotz can show version
        rotz --version

        # Test basic subcommands are available
        rotz init --help
        rotz link --help
        rotz install --help
        rotz clone --help
        rotz completions --help

        # Test that completions work
        rotz completions bash | head -5
        rotz completions fish | head -5
        rotz completions zsh | head -5

        # Test config file format detection
        echo "This tests that rotz can handle different file formats"

about:
  homepage: https://github.com/volllly/rotz
  repository: https://github.com/volllly/rotz
  documentation: https://volllly.github.io/rotz/
  license: MIT
  license_file:
    - LICENSE
    - thirdpartylicenses.yaml
  summary: Fully cross platform dotfile manager and dev environment bootstrapper written in Rust
  description: |
    Rotz is a fully cross-platform dotfile manager and development environment
    bootstrapper written in Rust. It provides three main functionalities:

    - Linking dotfiles from a common repository to your system
    - Installing the applications you need to start working on a new/empty machine
    - Full cross-platform functionality across Linux, macOS, and Windows

    Rotz uses YAML, TOML, or JSON configuration files and can auto-detect the
    correct file type. It supports templating with Handlebars for dynamic
    configuration and provides a simple command-line interface for managing
    your development environment setup.

extra:
  recipe-maintainers:
    - phreed

  version:
    github-releases:
      - volllly/rotz
