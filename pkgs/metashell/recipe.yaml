# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json
schema_version: 1

context:
  version: "5.0.0"

package:
  name: metashell
  version: ${{ version }}

source:
  url: https://api.github.com/repos/metashell/metashell/tarball/v5.0.0
  sha256: 3d07c8d90f456dff9091f72903fe2127b2e3e32346f40e6afcbac4b034ec1d3c
  patches:
  - ./patches/01-include-missiong-cstddef.patch

build:
  number: 0
  script:
    interpreter: nu
    content: |
      ^cmake -S 3rd/templight/llvm -B build/templight -DLIBCLANG_BUILD_STATIC=ON -DLLVM_ENABLE_TERMINFO=OFF -DLLVM_ENABLE_PROJECTS=clang ${{ CMAKE_ARGS }}
      ^cmake --build build/templight --target templight
      ^cmake -S . -B build/metashell ${{ CMAKE_ARGS }}
      ^cmake --build build/metashell
      ^cmake --install build/metashell

requirements:
  build:
  - nushell
  - ${{ compiler('c') }}
  - ${{ compiler('cxx') }}
    # - ${{ stdlib('c') }}
  - cmake
  host:
  - if: linux
    then:
    - libedit
    - libxml2
    - zlib
    - readline

tests:
  # Test 1: Verify package contents are included
- package_contents:
    files:
        # Metashell binary
    - ${{ "Library/" if win }}bin/metashell${{ ".exe" if win }}

  # Test 2: Functional test
- requirements:
    build:
    - nushell
  script:
    interpreter: nu
    content: |
      "template <class T> struct add_const { using type = const T; };
      add_const<int>::type" | save test.hpp
      ^($env.PREFIX | path join "bin" "metashell") -H < test.hpp | ^grep "const int"

about:
  homepage: http://metashell.org
  license: GPL-3.0-or-later
  license_file: LICENSE
  summary: Metaprogramming shell for C++ templates

extra:
  recipe-maintainers:
  - phreed
