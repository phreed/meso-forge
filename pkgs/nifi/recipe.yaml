# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json
schema_version: 1

context:
  version: "2.4.0"
  github_org: apache
  github_repo: nifi
  main_class: org.apache.nifi.bootstrap.RunNiFi
  binary_name: nifi
  language: java
  build_system: maven
  package_type: application
  java_version: 21

package:
  name: nifi
  version: ${{ version }}

source:
  # Source archive from GitHub release: https://github.com/apache/nifi/releases/tag/rel%2Fnifi-2.4.0
  url: https://github.com/${{ github_org }}/${{ github_repo }}/archive/refs/tags/rel/nifi-${{ version }}.tar.gz
  sha256: "d4da6800216eecf27246fe973b2f19fef961cf5125c6e14fbe1d7efdb295b21a"
  # GitHub archive extracts to nifi-rel-nifi-2.4.0 directory
  target_directory: nifi-rel-nifi-${{ version }}

build:
  number: 0
  script:
    interpreter: nu
    env:
      JAVA_HOME: ${{ "$PREFIX" if unix else "$LIBRARY_PREFIX" }}
      MAVEN_OPTS: "-Xmx4g -XX:+UseG1GC -XX:ReservedCodeCacheSize=1g"
      # Skip tests and documentation to speed up build
      MAVEN_SKIP_TESTS: "true"
      MAVEN_SKIP_DOCS: "true"
    content: |
      print $"Building Apache NiFi ($env.PKG_VERSION) from source..."
      print "This is a large project and may take significant time to build."

      # Determine platform-specific paths
      let install_prefix = if ($nu.os-info.name == "windows") {
          $env.LIBRARY_PREFIX
      } else {
          $env.PREFIX
      }

      let bin_dir = ($install_prefix | path join "bin")
      let lib_dir = ($install_prefix | path join "lib")
      let libexec_dir = ($install_prefix | path join "libexec" "nifi")
      let share_dir = ($install_prefix | path join "share" "nifi")

      # Create necessary directories
      mkdir $bin_dir
      mkdir $lib_dir
      mkdir $libexec_dir
      mkdir $share_dir

      print "Building NiFi with Maven..."

      # Change to the extracted source directory
      cd nifi-rel-nifi-${{ version }}

      # Build NiFi assembly (this creates the full distribution)
      # We skip tests and documentation to reduce build time
      mvn clean install -T 2.0C -DskipTests=true -Dmaven.javadoc.skip=true -Drat.skip=true -Dcheckstyle.skip=true -Dspotbugs.skip=true

      # Find the built NiFi assembly
      let nifi_assembly_dir = "nifi-assembly/target"
      let assembly_files = (ls $nifi_assembly_dir | where name =~ 'nifi-.*-bin\.zip$')

      if ($assembly_files | length) == 0 {
          error make {msg: "No NiFi assembly found in nifi-assembly/target"}
      }

      let assembly_zip = ($assembly_files | first).name
      print $"Found NiFi assembly: ($assembly_zip)"

      # Extract the assembly
      let temp_extract = "temp_nifi_extract"
      mkdir $temp_extract

      if ($nu.os-info.name == "windows") {
          # Use PowerShell on Windows
          powershell -Command $"Expand-Archive -Path '($assembly_zip)' -DestinationPath '($temp_extract)'"
      } else {
          # Use unzip on Unix systems
          unzip -q $assembly_zip -d $temp_extract
      }

      # Find the extracted NiFi directory
      let extracted_dirs = (ls $temp_extract | where type == dir)
      if ($extracted_dirs | length) == 0 {
          error make {msg: "No extracted NiFi directory found"}
      }

      let nifi_dir = ($extracted_dirs | first).name
      print $"Extracted NiFi to: ($nifi_dir)"

      # Copy NiFi installation to libexec
      cp -r ($nifi_dir | path join "*") $libexec_dir

      # Create wrapper script for nifi command
      let nifi_script = if ($nu.os-info.name == "windows") {
          $'@echo off
          set NIFI_HOME="%~dp0\..\libexec\nifi"
          set JAVA_HOME=($env.JAVA_HOME)
          "%NIFI_HOME%\bin\nifi.bat" %*'
      } else {
          [
            "#!/bin/bash",
            'SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null; pwd )"',
            'export NIFI_HOME="$SCRIPT_DIR/../libexec/nifi"',
            $'export JAVA_HOME="($env.JAVA_HOME)"',
            'exec "$NIFI_HOME/bin/nifi.sh" "$@"'
          ] | str join "\n"
      }

      let wrapper_file = if ($nu.os-info.name == "windows") {
          ($bin_dir | path join "nifi.bat")
      } else {
          ($bin_dir | path join "nifi")
      }

      $nifi_script | save $wrapper_file

      if ($nu.os-info.name != "windows") {
          chmod +x $wrapper_file
      }

      # Copy documentation and examples to share directory
      if (($libexec_dir | path join "docs") | path exists) {
          cp -r ($libexec_dir | path join "docs") ($share_dir | path join "docs")
      }

      if (($libexec_dir | path join "examples") | path exists) {
          cp -r ($libexec_dir | path join "examples") ($share_dir | path join "examples")
      }

      # Clean up temporary files
      rm -rf $temp_extract

      print "Apache NiFi build completed successfully!"
      print $"NiFi installed to: ($libexec_dir)"
      print $"Run with: nifi"

requirements:
  build:
    - nushell
    - openjdk=${{ java_version }}
    - maven >=3.6.0
    # NiFi build requirements
    - unzip # For extracting the assembly
    - tar
    - gzip

  host:
    - openjdk=${{ java_version }}

  run:
    - openjdk=${{ java_version }}
    # NiFi runtime requirements
    - which # Used by NiFi scripts

tests:
  # Test 1: Basic NiFi command execution
  - requirements:
      build:
        - nushell
    script:
      interpreter: nu
      content:
        # Test NiFi status command (should work without starting NiFi)
        - ^nifi status
        # Test help command
        - try { ^nifi --help } catch { ^nifi help }

  # Test 2: Java version compatibility
  - script:
      interpreter: nu
      content: |
        print "Testing Java version compatibility..."

        let java_version = (java -version 2>&1 | lines | first | parse 'version "{version}"' | get version.0)
        print $"Java version: ($java_version)"

        # Verify it's Java 21
        if not ($java_version | str starts-with "21") {
            error make {msg: $"Expected Java 21, got ($java_version)"}
        }

        print "Java compatibility test passed!"

  # Test 3: NiFi installation structure validation
  - package_contents:
      files:
        # Application files
        - ${{ "Library/" if win }}bin/nifi${{ ".bat" if win }}
        - ${{ "Library/" if win }}libexec/nifi/bin/nifi.sh
        - ${{ "Library/" if win }}libexec/nifi/conf/nifi.properties
        - ${{ "Library/" if win }}libexec/nifi/lib/nifi-api-*.jar
        - ${{ "Library/" if win }}share/nifi/README

  # Test 4: NiFi configuration validation
  - script:
      interpreter: nu
      content: |
        print "Validating NiFi installation..."

        let nifi_home = if ($nu.os-info.name == "windows") {
            $env.LIBRARY_PREFIX | path join "libexec" "nifi"
        } else {
            $env.PREFIX | path join "libexec" "nifi"
        }

        # Check if essential NiFi files exist
        let essential_files = [
            "conf/nifi.properties",
            "conf/bootstrap.conf",
            "conf/logback.xml"
        ]

        for file in $essential_files {
            let file_path = ($nifi_home | path join $file)
            if not ($file_path | path exists) {
                error make {msg: $"Essential NiFi file missing: ($file)"}
            }
        }

        print "NiFi installation validation passed!"

about:
  homepage: https://nifi.apache.org
  repository: https://github.com/apache/nifi
  documentation: https://nifi.apache.org/documentation/
  summary: Easy to use, powerful, and reliable system to process and distribute data
  description: |
    Apache NiFi is a dataflow system based on the concepts of flow-based programming.
    It supports powerful and scalable directed graphs of data routing, transformation, and
    system mediation logic. NiFi has a web-based user interface for design, control,
    feedback, and monitoring of dataflows.

    Key features:
    - Web-based user interface for seamless experience between design, control, feedback, and monitoring
    - Highly configurable Loss tolerant vs guaranteed delivery, Low latency vs high throughput, Dynamic prioritization
    - Flow can be modified at runtime
    - Data Lineage tracking from beginning to end
    - Designed for extension - build your own processors and more
    - Secure communication over SSL, Multi-tenant authorization, and internal authorization/policy management

    This package builds Apache NiFi from source using Maven and Java 21.
    After installation, you can start NiFi with the `nifi` command.

  license: Apache-2.0
  license_file:
    - LICENSE
    - NOTICE

extra:
  recipe-maintainers:
    - phreed

  # Additional metadata for NiFi
  jvm:
    language: java
    java_version: 21
    build_system: maven
    package_type: application
    main_class: org.apache.nifi.bootstrap.RunNiFi

  # NiFi specific metadata
  nifi:
    default_port: 8443
    default_ui_port: 8443
    requires_ssl: true
