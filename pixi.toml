"$schema" = "https://pixi.sh/latest/schema/manifest/schema.json"

[workspace]
name = "meso-forge"
version = "0.1.0"
description = "Packages needed by my projects"
authors = ["Fred Eisele <fred.eisele@vanderbilt.edu>"]
channels = ["conda-forge", "https://prefix.dev/meso-forge"]
platforms = [
    # "osx-arm64",
    "linux-64",
    # "win-64",
    # "osx-64",
]
preview = ["pixi-build"]

[dependencies]
rattler-build = ">=0.40.0,<0.41"
rattler-index = ">=0.22.4,<0.23"
nushell = ">=0.103.0,<0.104"
typer = ">=0.16.0,<0.17"
pyyaml = ">=6.0.2,<7"
glib = ">=2.84.0,<3.0"
glib-tools = ">=2.84.0,<3.0"
libzlib = ">=1.3.0,<2.0"


[tasks.clean]
args = [
    { arg = "pkg", default = "_skeleton_python" },
    { arg = "tgt_platform", default = "linux-64" },
]
cmd = [
    "nu",
    "-c",
    "use .scripts/manifest_utils.nu *; if (conda-file-exists {{ pkg }} {{ tgt_platform }}) { remove-conda-file {{ pkg }} {{ tgt_platform }} } else { print 'No conda file found for {{ pkg }} on {{ tgt_platform }}' }",
]
# interpreter = "nu"

[tasks.clean-all]
cmd = ["rm", "-rf", "pkgs-out"]

[tasks.clean-cache-pkgs]
description = "Clean downloaded conda packages cache"
cmd = ["rm", "-rf", "$HOME/.cache/rattler/cache/pkgs"]

[tasks.clean-cache-envs]
description = "Clean cached environments and build tool environments"
cmd = [
    "rm",
    "-rf",
    "$HOME/.cache/rattler/cache/cached-envs-v0",
    "$HOME/.cache/rattler/cache/cached-build-tool-envs-v0",
]

[tasks.clean-cache-repodata]
description = "Clean repository metadata cache"
cmd = ["rm", "-rf", "$HOME/.cache/rattler/cache/repodata"]

[tasks.clean-cache-all]
description = "Clean all rattler system caches"
cmd = ["rm", "-rf", "$HOME/.cache/rattler"]

[tasks.clean-cache-source-builds]
description = "Clean built packages from source cache"
cmd = ["rm", "-rf", "$HOME/.cache/rattler/cache/source-builds-v0"]

[tasks.clean-everything]
description = "Clean all project outputs and system caches"
depends-on = ["clean-all", "clean-cache-all"]

[tasks.analyze-recipes]
cmd = ["python", ".scripts/analyze_recipes.py"]

[tasks.fix-recipe-indentation]
cmd = ["python", ".scripts/fix_recipe_indentation.py"]

[tasks.generate-readmes]
cmd = ["python", ".scripts/generate_readmes.py"]


[tasks.build]
args = [
    { arg = "pkg", default = "_skeleton_python" },
    { arg = "tgt_platform", default = "linux-64" },
]
cmd = [
    "nu",
    ".scripts/build.nu",
    "{{ pkg }}",
    "--target-platform={{ tgt_platform }}",
    "--no-test",
]

[tasks.check-package]
args = [
    { arg = "pkg", default = "_skeleton_python" },
    { arg = "tgt_platform", default = "linux-64" },
]
cmd = [
    "nu",
    ".scripts/check_package_exists.nu",
    "{{ pkg }}",
    "--platform={{ tgt_platform }}",
    "--check_all",
    "--check_local",
]

[tasks.list-manifest]
cmd = ["nu", "-c", "use .scripts/manifest_utils.nu *; manifest-summary"]

[tasks.clean-manifest]
cmd = ["nu", "-c", "use .scripts/manifest_utils.nu *; manifest-cleanup"]


[tasks.package-status]
args = [
    { arg = "pkg", default = "_skeleton_python" },
    { arg = "tgt_platform", default = "linux-64" },
]
cmd = [
    "nu",
    "-c",
    "use .scripts/build.nu *; package-status {{ pkg }} --platform {{ tgt_platform }}",
]

[tasks.build-skeletons]
depends-on = [
    { task = "build", args = [
        "_skeleton_go",
        "linux-64",
        "--pkg-dir=./pkg-skeletons",
    ] },
    { task = "build", args = [
        "_skeleton_js",
        "linux-64",
        "--pkg-dir=./pkg-skeletons",
    ] },
    { task = "build", args = [
        "_skeleton_python",
        "linux-64",
        "--pkg-dir=./pkg-skeletons",
    ] },
    { task = "build", args = [
        "_skeleton_rust",
        "linux-64",
        "--pkg-dir=./pkg-skeletons",
    ] },
]

[tasks.build-large]
args = [{ arg = "tgt_platform", default = "linux-64" }]
depends-on = [{ task = "build", args = ["nifi", "{{ tgt_platform }}"] }]

[tasks.build-wip]
args = [{ arg = "tgt_platform", default = "linux-64" }]
depends-on = [{ task = "build", args = ["metashell", "{{ tgt_platform }}"] }]

[tasks.build-all]
args = [{ arg = "tgt_platform", default = "linux-64" }]
depends-on = [
    { task = "build", args = ["asciidoctor-revealjs", "{{ tgt_platform }}"] },
    { task = "build", args = ["asyncio", "{{ tgt_platform }}"] },
    { task = "build", args = ["bash-preexec", "{{ tgt_platform }}"] },
    { task = "build", args = ["ble-sh", "{{ tgt_platform }}"] },
    { task = "build", args = ["bitwarden-cli", "{{ tgt_platform }}"] },
    { task = "build", args = ["devcontainer-cli", "{{ tgt_platform }}"] },
    { task = "build", args = ["digitalpy", "{{ tgt_platform }}"] },
    { task = "build", args = ["dysk", "{{ tgt_platform }}"] },
    { task = "build", args = ["fd", "{{ tgt_platform }}"] },
    { task = "build", args = ["flask-jwt-extended", "{{ tgt_platform }}"] },
    { task = "build", args = ["freetakserver", "{{ tgt_platform }}"] },
    { task = "build", args = ["freetakserver-ui", "{{ tgt_platform }}"] },
    { task = "build", args = ["fsarchiver", "{{ tgt_platform }}"] },
    # { task = "build", args = ["gitql", "{{ tgt_platform }}" ] },
    { task = "build", args = ["gtksourceview5", "{{ tgt_platform }}"] },
    { task = "build", args = ["iamb", "{{ tgt_platform }}"] },
    { task = "build", args = ["internxt-cli", "{{ tgt_platform }}"] },
    { task = "build", args = ["jank", "{{ tgt_platform }}"] },
    { task = "build", args = ["mediamtx", "{{ tgt_platform }}"] },
    { task = "build", args = ["mumble-voip", "{{ tgt_platform }}"] },
    { task = "build", args = ["node-red", "{{ tgt_platform }}"] },
    { task = "build", args = ["node-red-worldmap", "{{ tgt_platform }}"] },
    { task = "build", args = ["podlet", "{{ tgt_platform }}"] },
    { task = "build", args = ["pwgen", "{{ tgt_platform }}"] },
    { task = "build", args = ["ratatui", "{{ tgt_platform }}"] },
    { task = "build", args = ["testresources", "{{ tgt_platform }}"] },
    # { task = "build", args = ["trippy", "{{ tgt_platform }}" ] },
]

[tasks.test]
args = [
    { arg = "pkg", default = "_skeleton_python" },
    { arg = "tgt_platform", default = "linux-64" },
]
cmd = [
    "nu",
    ".scripts/test_package.nu",
    "{{ pkg }}",
    "--target-platform={{ tgt_platform }}",
]
depends-on = [{ task = "build", args = ["{{ pkg }}", "{{ tgt_platform }}"] }]

[tasks.test-all]
args = [{ arg = "tgt_platform", default = "linux-64" }]
cmd = [
    "nu",
    "-c",
    "use .scripts/test_package.nu *; test-all --platform {{ tgt_platform }} --continue-on-error",
]

[tasks.test-status]
cmd = ["nu", "-c", "use .scripts/test_package.nu *; test-status"]


[tasks.publish-pd]
args = [
    { arg = "pkg", default = "_skeleton_python" },
    { arg = "tgt_platform", default = "linux-64" },
    { arg = "force", default = "" },
]
# the upload expects the RATTLER_AUTH_FILE variable to be set
cmd = [
    "nu",
    ".scripts/package_publish.nu",
    "{{ pkg }}",
    "--method=pd",
    "--target-platform={{ tgt_platform }}",
    "{{ '--force' if force != '' else '' }}",
]

[tasks.publish-s3]
args = [
    { arg = "pkg", default = "_skeleton_python" },
    { arg = "tgt_platform", default = "linux-64" },
]
# the upload expects the RATTLER_AUTH_FILE variable to be set
cmd = [
    "nu",
    ".scripts/package_publish.nu",
    "{{ pkg }}",
    "--method=s3",
    "--channel=s3://pixi/meso-forge",
    "--url=https://minio.isis.vanderbilt.edu",
    "--target-platform={{ tgt_platform }}",
]
depends-on = [
    { task = "build", args = [
        "{{ pkg }}",
        "{{ tgt_platform }}",
    ] },
    { task = "index-s3" },
]

[tasks.publish-s3-local]
args = [
    { arg = "pkg", default = "_skeleton_python" },
    { arg = "tgt_platform", default = "linux-64" },
]
# the upload expects the RATTLER_AUTH_FILE variable to be set
cmd = [
    "nu",
    ".scripts/package_publish.nu",
    "{{ pkg }}",
    "--method=s3",
    "--channel=s3://pixi-local/meso-forge",
    "--url=http://127.0.0.1",
    "--target-platform={{ tgt_platform }}",
]
depends-on = [
    { task = "build", args = [
        "{{ pkg }}",
        "{{ tgt_platform }}",
    ] },
    { task = "index-s3-local" },
]

[tasks.publish-status]
cmd = ["nu", "-c", "use .scripts/package_publish.nu *; publish-status"]

[tasks.publish-pd-all]
args = [{ arg = "tgt_platform", default = "linux-64" }]
cmd = [
    "nu",
    "-c",
    "use .scripts/package_publish.nu *; publish-all --method pd --channel meso-forge --platform {{ tgt_platform }} --continue-on-error",
]

[tasks.publish-s3-all]
args = [{ arg = "tgt_platform", default = "linux-64" }]
cmd = [
    "nu",
    "-c",
    "use .scripts/package_publish.nu *; publish-all --method s3 --channel 's3://pixi/meso-forge' --platform {{ tgt_platform }} --continue-on-error",
]

[tasks.publish-pd-dry]
args = [
    { arg = "pkg", default = "_skeleton_python" },
    { arg = "tgt_platform", default = "linux-64" },
    { arg = "force", default = "" },
]
cmd = [
    "nu",
    ".scripts/package_publish.nu",
    "{{ pkg }}",
    "--method=pd",
    "--target-platform={{ tgt_platform }}",
    "{{ '--force' if force != '' else '' }}",
    "--dry-run",
]

[tasks.publish-s3-dry]
args = [
    { arg = "pkg", default = "_skeleton_python" },
    { arg = "tgt_platform", default = "linux-64" },
]
cmd = [
    "nu",
    ".scripts/package_publish.nu",
    "{{ pkg }}",
    "--method=s3",
    "--target-platform={{ tgt_platform }}",
    "--dry-run",
]

[tasks.publish-pd-dry-all]
args = [{ arg = "tgt_platform", default = "linux-64" }]
cmd = [
    "nu",
    "-c",
    "use .scripts/package_publish.nu *; publish-all --method pd --channel meso-forge --platform {{ tgt_platform }} --continue-on-error --dry-run",
]

[tasks.publish-s3-dry-all]
args = [{ arg = "tgt_platform", default = "linux-64" }]
cmd = [
    "nu",
    "-c",
    "use .scripts/package_publish.nu *; publish-all --method s3 --channel 's3://pixi/meso-forge' --platform {{ tgt_platform }} --continue-on-error --dry-run",
]

# Package retraction tasks
[tasks.retract-pd]
args = [
    { arg = "pkg", default = "_skeleton_python" },
    { arg = "channel", default = "meso-forge" },
    { arg = "versions", default = "1.0.0" },
    { arg = "tgt_platform", default = "linux-64" },
    { arg = "force", default = "" },
]
# the retraction expects the RATTLER_AUTH_FILE variable to be set
cmd = [
    "nu",
    ".scripts/package_retract.nu",
    "{{ pkg }}",
    "--channel={{ channel }}",
    "--versions={{ versions }}",
    "--method=pd",
    "--target-platform={{ tgt_platform }}",
    "{{ '--force' if force != '' else '' }}",
]

[tasks.retract-s3]
args = [
    { arg = "pkg", default = "_skeleton_python" },
    { arg = "channel", default = "s3://pixi/meso-forge" },
    { arg = "versions", default = "1.0.0" },
    { arg = "tgt_platform", default = "linux-64" },
    { arg = "url", default = "https://minio.isis.vanderbilt.edu" },
    { arg = "force", default = "" },
]
# the retraction expects AWS credentials to be configured
cmd = [
    "nu",
    ".scripts/package_retract.nu",
    "{{ pkg }}",
    "--channel={{ channel }}",
    "--versions={{ versions }}",
    "--method=s3",
    "--url={{ url }}",
    "--target-platform={{ tgt_platform }}",
    "{{ '--force' if force != '' else '' }}",
]

[tasks.retract-s3-local]
args = [
    { arg = "pkg", default = "_skeleton_python" },
    { arg = "channel", default = "s3://pixi-local/meso-forge" },
    { arg = "versions", default = "1.0.0" },
    { arg = "tgt_platform", default = "linux-64" },
    { arg = "force", default = "" },
]
# the retraction expects AWS credentials to be configured
cmd = [
    "nu",
    ".scripts/package_retract.nu",
    "{{ pkg }}",
    "--channel={{ channel }}",
    "--versions={{ versions }}",
    "--method=s3",
    "--url=http://127.0.0.1",
    "--target-platform={{ tgt_platform }}",
    "{{ '--force' if force != '' else '' }}",
]

[tasks.retract-pd-dry]
args = [
    { arg = "pkg", default = "_skeleton_python" },
    { arg = "channel", default = "meso-forge" },
    { arg = "versions", default = "1.0.0" },
    { arg = "tgt_platform", default = "linux-64" },
    { arg = "force", default = "" },
]
cmd = [
    "nu",
    ".scripts/package_retract.nu",
    "{{ pkg }}",
    "--channel={{ channel }}",
    "--versions={{ versions }}",
    "--method=pd",
    "--target-platform={{ tgt_platform }}",
    "{{ '--force' if force != '' else '' }}",
    "--dry-run",
]

[tasks.retract-s3-dry]
args = [
    { arg = "pkg", default = "_skeleton_python" },
    { arg = "channel", default = "s3://pixi/meso-forge" },
    { arg = "versions", default = "1.0.0" },
    { arg = "tgt_platform", default = "linux-64" },
    { arg = "url", default = "https://minio.isis.vanderbilt.edu" },
    { arg = "force", default = "" },
]
cmd = [
    "nu",
    ".scripts/package_retract.nu",
    "{{ pkg }}",
    "--channel={{ channel }}",
    "--versions={{ versions }}",
    "--method=s3",
    "--url={{ url }}",
    "--target-platform={{ tgt_platform }}",
    "{{ '--force' if force != '' else '' }}",
    "--dry-run",
]


[tasks.index-s3]
args = [
    { arg = "url", default = "https://minio.isis.vanderbilt.edu" },
    { arg = "channel", default = "s3://pixi/meso-forge" },
]
cmd = [
    "rattler-index",
    "s3",
    "{{ channel }}",
    "--region",
    "auto",
    "--endpoint-url",
    "{{ url }}",
    "--force-path-style",
    "||",
    "true",
]

[tasks.index-s3-local]
depends-on = [
    { task = "index-s3", args = [
        "http://127.0.0.1",
        "s3://pixi-local/meso-forge",
    ] },
]


[feature.version-ctl.dependencies]
python = "3.12.*"
requests = ">=2.32.3,<3"
pyyaml = ">=6.0.2,<7"
"ruamel.yaml" = ">=0.17.0,<0.18"
semver = ">=3.0.2,<4"
py-rattler = ">=0.1.0"
aiohttp = ">=3.9.0,<4"

# Version control tasks
[feature.version-ctl.tasks.update-version]
cmd = ["python", ".scripts/version_ctl.py", "--update", "--package"]

[feature.version-ctl.tasks.update-version-all]
cmd = ["python", ".scripts/version_ctl.py", "--update", "--all"]


[environments.update]
features = ["version-ctl"]
