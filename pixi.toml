"$schema" = "https://pixi.sh/latest/schema/manifest/schema.json"

[workspace]
name = "meso-forge"
version = "0.1.0"
description = "Packages needed by my projects"
authors = ["Fred Eisele <fred.eisele@vanderbilt.edu>"]
channels = ["conda-forge"]
platforms = [
    # "osx-arm64",
    "linux-64",
    # "win-64",
    # "osx-64",
]
preview = ["pixi-build"]

[dependencies]
rattler-build = ">=0.40.0,<0.41"
rattler-index = ">=0.22.4,<0.23"
nushell = ">=0.103.0,<0.104"
typer = ">=0.16.0,<0.17"
pyyaml = ">=6.0.2,<7"
glib = ">=2.84.0,<3.0"
glib-tools = ">=2.84.0,<3.0"
libzlib = ">=1.3.0,<2.0"


[tasks.clean]
args = [
    { arg = "pkg", default = "_skeleton_python" },
    { arg = "tgt_platform", default = "linux-64" },
]
cmd = [
    "nu",
    "-c",
    "use .scripts/manage_conda_file.nu *; if (conda-file-exists {{ pkg }} {{ tgt_platform }}) { remove-conda-file {{ pkg }} {{ tgt_platform }} } else { print 'No conda file found for {{ pkg }} on {{ tgt_platform }}' }",
]

[tasks.clean-all]
cmd = ["rm", "-rf", "pkgs-out"]

[tasks.clean-cache-pkgs]
description = "Clean downloaded conda packages cache (~14GB)"
cmd = ["rm", "-rf", "$HOME/.cache/rattler/cache/pkgs"]

[tasks.clean-cache-envs]
description = "Clean cached environments and build tool environments (~530MB)"
cmd = [
    "rm",
    "-rf",
    "$HOME/.cache/rattler/cache/cached-envs-v0",
    "$HOME/.cache/rattler/cache/cached-build-tool-envs-v0",
]

[tasks.clean-cache-repodata]
description = "Clean repository metadata cache (~472MB)"
cmd = ["rm", "-rf", "$HOME/.cache/rattler/cache/repodata"]

[tasks.clean-cache-all]
description = "Clean all rattler system caches (~16GB)"
cmd = ["rm", "-rf", "$HOME/.cache/rattler"]

[tasks.clean-cache-source-builds]
description = "Clean built packages from source cache (~1MB)"
cmd = ["rm", "-rf", "$HOME/.cache/rattler/cache/source-builds-v0"]

[tasks.clean-everything]
description = "Clean all project outputs and system caches"
depends-on = ["clean-all", "clean-cache-all"]

[tasks.analyze-recipes]
cmd = ["python", ".scripts/analyze_recipes.py"]

[tasks.fix-recipe-indentation]
cmd = ["python", ".scripts/fix_recipe_indentation.py"]

[tasks.generate-readmes]
cmd = ["python", ".scripts/generate_readmes.py"]


[tasks.build]
args = [
    { arg = "pkg", default = "_skeleton_python" },
    { arg = "tgt_platform", default = "linux-64" },
    { arg = "pkg_dir", default = "./pkgs" },
]
cmd = [
    "rattler-build",
    "build",
    "--recipe-dir",
    "./{{ pkg_dir }}/{{ pkg }}",
    "--output-dir",
    "./pkgs-out",
    "--skip-existing=local",
    "--target-platform={{ tgt_platform }}",
    "--channel",
    "https://prefix.dev/meso-forge",
    "--channel",
    "conda-forge",
    "-vvv",
]

[tasks.build-skeletons]
depends-on = [
    { task = "build", args = [
        "_skeleton_js",
        "linux-64",
        "pkg_skeleton",
    ] },
    { task = "build", args = [
        "_skeleton_python",
        "linux-64",
        "pkg_skeleton",
    ] },
    { task = "build", args = [
        "_skeleton_rust",
        "linux-64",
        "pkg_skeleton",
    ] },
]

[tasks.build-all]
args = [{ arg = "tgt_platform", default = "linux-64" }]
depends-on = [
    { task = "build", args = [
        "asyncio",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "bash-preexec",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "digitalpy",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "dysk",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "fd",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "flask-jwt-extended",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "gtksourceview5",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "freetakserver",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "freetakserver-ui",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "fsarchiver",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "node-red",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "node-red-worldmap",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "pwgen",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "ratatui",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "testresources",
        "{{ tgt_platform }}",
    ] },
]

[tasks.build-wip]
args = [{ arg = "tgt_platform", default = "linux-64" }]
depends-on = [
    { task = "build", args = [
        "asciidoctor-revealjs",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "bitwarden-cli",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "devcontainer-cli",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "iamb",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "internxt-cli",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "jank",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "kombose",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "mediamtx",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "metashell",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "mumble-voip",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "neovide",
        "{{ tgt_platform }}",
    ] },
    { task = "build", args = [
        "systemd-pixi-generator",
        "{{ tgt_platform }}",
    ] },
]

[tasks.publish-pd]
args = [
    { arg = "pkg", default = "_skeleton_python" },
    { arg = "tgt_platform", default = "linux-64" },
]
# the upload expects the RATTLER_AUTH_FILE variable to be set
cmd = [
    "nu",
    "-c",
    "use .scripts/manage_conda_file.nu *; let conda_file = (find-conda-file {{ pkg }} {{ tgt_platform }} --quiet); if not ($conda_file | is-empty) { ^rattler-build upload prefix --skip-existing -vvv --channel meso-forge $conda_file } else { print 'No conda file found' }",
]
depends-on = [{ task = "build", args = ["{{ pkg }}", "{{ tgt_platform }}"] }]

[tasks.publish-s3]
args = [
    { arg = "pkg", default = "_skeleton_python" },
    { arg = "url", default = "https://minio.isis.vanderbilt.edu" },
    { arg = "channel", default = "s3://pixi/meso-forge" },
    { arg = "tgt_platform", default = "linux-64" },
]
# the upload expects the RATTLER_AUTH_FILE variable to be set
cmd = [
    "nu",
    "-c",
    "use .scripts/manage_conda_file.nu *; let conda_file = (find-conda-file {{ pkg }} {{ tgt_platform }} --quiet); if not ($conda_file | is-empty) { ^rattler-build upload s3 --channel '{{ channel }}' --region auto --endpoint-url '{{ url }}' --force-path-style -vvv $conda_file } else { print 'No conda file found' }",
]
depends-on = [{ task = "build", args = ["{{ pkg }}", "{{ tgt_platform }}"] }]

[tasks.publish-s3-local]
args = [
    { arg = "pkg", default = "_skeleton_python" },
    { arg = "tgt_platform", default = "linux-64" },
]
depends-on = [
    { task = "build", args = [
        "{{ pkg }}",
        "{{ tgt_platform }}",
    ] },
    { task = "index", args = [
        "http://127.0.0.1",
        "s3://pixi-local/meso-forge",
    ] },
]


[tasks.index]
args = [
    { arg = "url", default = "https://minio.isis.vanderbilt.edu" },
    { arg = "channel", default = "s3://pixi/meso-forge" },
]
cmd = [
    "rattler-index",
    "s3",
    "{{ channel }}",
    "--region",
    "auto",
    "--endpoint-url",
    "{{ url }}",
    "--force-path-style",
    "||",
    "true",
]

[tasks.index-local]
depends-on = [
    { task = "index", args = [
        "http://127.0.0.1",
        "s3://pixi-local/meso-forge",
    ] },
]

[tasks.publish-forged]
depends-on = [
    { task = "publish-s3", args = [
        "asciidoctor",
    ] },
    { task = "publish-s3", args = [
        "asciidoctor-pdf",
    ] },
]

[tasks.publish-all]
depends-on = [
    { task = "publish-s3", args = [
        "asciidoctor-revealjs",
    ] },
    { task = "publish-pd", args = [
        "asyncio",
    ] },
    { task = "publish-pd", args = [
        "bash-preexec",
    ] },
    { task = "publish-s3", args = [
        "bitwarden-cli",
    ] },
    { task = "publish-s3", args = [
        "devcontainer-cli",
    ] },
    { task = "publish-pd", args = [
        "digitalpy",
    ] },
    { task = "publish-s3", args = [
        "dysk",
    ] },
    { task = "publish-s3", args = [
        "fd",
    ] },
    { task = "publish-pd", args = [
        "flask-jwt-extended",
    ] },
    { task = "publish-pd", args = [
        "testresources",
    ] },
    { task = "publish-pd", args = [
        "freetakserver",
    ] },
    { task = "publish-pd", args = [
        "freetakserver-ui",
    ] },
    { task = "publish-pd", args = [
        "gtksourceview",
    ] },
    { task = "publish-s3", args = [
        "fsarchiver",
    ] },
    { task = "publish-s3", args = [
        "iamb",
    ] },
    { task = "publish-s3", args = [
        "internxt",
    ] },
    { task = "publish-s3", args = [
        "jank",
    ] },
    { task = "publish-s3", args = [
        "kombose",
    ] },
    { task = "publish-s3", args = [
        "mediamtx",
    ] },
    { task = "publish-s3", args = [
        "metashell",
    ] },
    { task = "publish-s3", args = [
        "mumble",
    ] },
    { task = "publish-s3", args = [
        "neovide",
    ] },
    { task = "publish-pd", args = [
        "node-red",
    ] },
    { task = "publish-pd", args = [
        "node-red-worldmap",
    ] },
    { task = "publish-s3", args = [
        "pwgen",
    ] },
    { task = "publish-pd", args = [
        "ratatui",
    ] },
    { task = "publish-s3", args = [
        "systemd-pixi-generator",
    ] },
]


[tasks.publish-s3-all]
depends-on = [
    { task = "publish-s3", args = [
        "asciidoctor-revealjs",
    ] },
    { task = "publish-s3", args = [
        "asyncio",
    ] },
    { task = "publish-s3", args = [
        "bash-preexec",
    ] },
    { task = "publish-s3", args = [
        "bitwarden-cli",
    ] },
    { task = "publish-s3", args = [
        "devcontainer-cli",
    ] },
    { task = "publish-s3", args = [
        "digitalpy",
    ] },
    { task = "publish-s3", args = [
        "dysk",
    ] },
    { task = "publish-s3", args = [
        "fd",
    ] },
    { task = "publish-s3", args = [
        "flask-jwt-extended",
    ] },
    { task = "publish-s3", args = [
        "testresources",
    ] },
    { task = "publish-s3", args = [
        "freetakserver",
    ] },
    { task = "publish-s3", args = [
        "freetakserver-ui",
    ] },
    { task = "publish-s3", args = [
        "fsarchiver",
    ] },
    { task = "publish-s3", args = [
        "iamb",
    ] },
    { task = "publish-s3", args = [
        "internxt",
    ] },
    { task = "publish-s3", args = [
        "jank",
    ] },
    { task = "publish-s3", args = [
        "kombose",
    ] },
    { task = "publish-s3", args = [
        "mediamtx",
    ] },
    { task = "publish-s3", args = [
        "metashell",
    ] },
    { task = "publish-s3", args = [
        "mumble",
    ] },
    { task = "publish-s3", args = [
        "neovide",
    ] },
    { task = "publish-s3", args = [
        "node-red",
    ] },
    { task = "publish-s3", args = [
        "node-red-worldmap",
    ] },
    { task = "publish-s3", args = [
        "pwgen",
    ] },
    { task = "publish-s3", args = [
        "ratatui",
    ] },
    { task = "publish-s3", args = [
        "systemd-pixi-generator",
    ] },
]


[feature.update-ver.dependencies]
python = "3.12.*"
requests = ">=2.32.3,<3"
pyyaml = ">=6.0.2,<7"
semver = ">=3.0.2,<4"

[feature.update-ver.tasks.update-ver]
cmd = ["python", ".scripts/update-versions.py"]

[environments.update]
features = ["update-ver"]
