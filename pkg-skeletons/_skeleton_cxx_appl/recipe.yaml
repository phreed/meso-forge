# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json
schema_version: 1

# C++ Application Package Recipe Template
# ======================================
#
# This template provides best practices for packaging C++ applications in conda.
# Based on patterns from real-world C++ packaging in the meso-forge project.
#
# C++ PACKAGING PATTERNS:
# - Use CMake for build system (most common)
# - Handle cross-platform builds with proper prefix detection
# - Use nushell interpreter for cross-platform build scripts
# - Test binary execution and functionality
#
# BUILD CONSIDERATIONS:
# - CMake handles most configuration automatically
# - Use CMAKE_INSTALL_PREFIX to target conda environment
# - Handle platform-specific paths (LIBRARY_PREFIX on Windows)
# - Set parallel build jobs for faster compilation
#
# DEPENDENCY MANAGEMENT:
# - Include necessary compilers in build requirements
# - Add system libraries to host requirements
# - Keep runtime dependencies minimal
# - Use pkg-config for library detection when available
#
# TESTING BEST PRACTICES:
# - Test that binaries can execute and show version/help
# - Test core functionality without complex setup
# - Verify all expected files are installed
# - Avoid tests requiring external resources or network access

context:
  # TODO: Update these variables for your package
  name: example-cpp-app
  version: "1.0.0"
  # GitHub organization or user
  github_org: example-org
  # GitHub repository name (often same as package name)
  github_repo: example-repo
  # Binary name (what users will type to run the program)
  binary_name: example
  # Number of parallel build jobs
  nprocs: 4

package:
  name: ${{ name }}
  version: ${{ version }}

source:
  # TODO: Update the URL and sha256 for your package
  url: https://github.com/${{ github_org }}/${{ github_repo }}/archive/refs/tags/v${{ version }}.tar.gz
  sha256: "0000000000000000000000000000000000000000000000000000000000000000"

build:
  number: 0
  script:
    interpreter: nu
    env:
      CMAKE_ARGS: ${{ CMAKE_ARGS }}
      CPU_COUNT: ${{ nprocs }}
    content: |
      echo $"Building ($env.PKG_NAME) version ($env.PKG_VERSION)..."

      # Determine correct install prefix based on platform
      let install_prefix = if ($nu.os-info.name == "windows") {
          $env.LIBRARY_PREFIX
      } else {
          $env.PREFIX
      }

      # Create build directory
      mkdir build
      cd build

      # Configure with CMake
      cmake .. (
          $"-DCMAKE_INSTALL_PREFIX=($install_prefix)" +
          $"-DCMAKE_BUILD_TYPE=Release" +
          $"-DCMAKE_PREFIX_PATH=($install_prefix)" +
          " " + ($env.CMAKE_ARGS? | default "")
      )

      # Build with parallel jobs
      cmake --build . --config Release --parallel $env.CPU_COUNT

      # Install
      cmake --install . --config Release

      # TODO: Add post-installation steps if needed
      # Copy additional files, create symlinks, etc.
      # cp ../config/default.conf ($install_prefix | path join "etc" "config.conf")

requirements:
  build:
    - nushell
    - cmake
    - make                    # Unix make
    - ninja                   # Alternative build system
    - ${{ compiler('c') }}    # C compiler
    - ${{ compiler('cxx') }}  # C++ compiler
    # TODO: Add other build tools if needed
    # - pkg-config            # For finding system libraries
    # - autotools             # For autotools-based projects
    # - meson                 # Alternative build system

  host:
    # TODO: Add development libraries your package depends on
    # - boost-cpp             # Boost C++ libraries
    # - eigen                 # Linear algebra library
    # - opencv                # Computer vision library
    # - qt-main               # Qt framework
    # - sqlite                # SQLite database
    # - curl                  # HTTP client library
    # - openssl               # Cryptography library
    # - zlib                  # Compression library
    # - libxml2               # XML parsing library
    # - libpng                # PNG image library
    # - jpeg                  # JPEG image library

  run:
    # TODO: Add runtime libraries your package depends on
    # Most C++ applications don't need explicit runtime dependencies
    # as they're usually statically linked or automatically detected
    # Only add if your application needs specific shared libraries at runtime
    # - libstdcxx-ng         # Standard C++ library (usually automatic)
    # - libgcc-ng            # GCC runtime (usually automatic)

tests:
  # Test 1: Verify package contents are included
  - package_contents:
      files:
        # C++ binary
        - ${{ "Library/" if win }}bin/${{ binary_name }}${{ ".exe" if win }}

        # TODO: Add other expected files
        # - etc/config.conf
        # - share/man/man1/${{ binary_name }}.1
        # - share/${{ name }}/templates/

  # Test 2: Functional tests
  - requirements:
      build:
        - nushell
    script:
      interpreter: nu
      content:
        # TODO: Update these tests for your specific binary
        # Basic functionality tests

        # Test that version command works (doesn't crash)
        - ^${{ binary_name }} --version

        # Test help command works
        - ^${{ binary_name }} --help

        # TODO: Add functional tests that verify core functionality
        # Keep tests simple and avoid external dependencies
        # - ^${{ binary_name }} --validate-config /dev/null
        # - ^${{ binary_name }} --dry-run --input test.txt
        # - ^${{ binary_name }} --check-syntax < /dev/null

        # Example: Test that program can process simple input
        # - echo "test input" | ^${{ binary_name }} --stdin --format json

        # Verify the binary was compiled correctly (basic smoke test)
        - if (^${{ binary_name }} --version | complete).exit_code == 0 { echo "âœ“ Binary executes successfully" } else { exit 1 }

about:
  # TODO: Update all metadata fields
  homepage: https://github.com/${{ github_org }}/${{ github_repo }}
  repository: https://github.com/${{ github_org }}/${{ github_repo }}
  documentation: https://github.com/${{ github_org }}/${{ github_repo }}/blob/main/README.md
  summary: Brief one-line description of the C++ application
  description: |
    A longer, multi-line description of what this C++ application does.
    Include key features, use cases, and any important notes.

    Features:
    - Feature 1: High-performance implementation
    - Feature 2: Cross-platform compatibility
    - Feature 3: Modern C++ standards compliance

    This application provides a command-line tool that can be used for...

  # TODO: Update license type (common: MIT, Apache-2.0, GPL-3.0, BSD-3-Clause)
  license: MIT
  license_file: LICENSE

extra:
  recipe-maintainers:
    # TODO: Add your GitHub username
    - github-username

  version:
    # TODO: Choose appropriate version detection method
    github-tags:
      - ^v(\d+\.\d+\.\d+)$

  # Common C++ packaging notes:
  # - CMake is the preferred build system for new C++ packages
  # - Use CMAKE_INSTALL_PREFIX to target conda environment
  # - Handle Windows vs Unix path differences properly
  # - Include both C and C++ compilers in build requirements
  # - Add system libraries to host requirements, not run requirements
  # - Test basic functionality rather than complex scenarios
  # - Use parallel builds for faster compilation
  # - Keep runtime dependencies minimal - most C++ apps are self-contained
  # - Consider static linking to reduce runtime dependencies
