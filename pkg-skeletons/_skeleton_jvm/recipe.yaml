# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json
schema_version: 1

# JVM Package Recipe Template
# ==========================
#
# This template provides best practices for packaging JVM applications and libraries in conda.
# Based on patterns from real-world JVM packaging in the meso-forge project.
#
# JVM PACKAGING PATTERNS:
# - Use appropriate Java version for build and runtime
# - Handle different build systems (Maven, Gradle, SBT)
# - Create wrapper scripts for executable applications
# - Test functionality rather than complex integration
#
# BUILD CONSIDERATIONS:
# - JVM applications are typically platform-independent (noarch: generic)
# - Use Maven/Gradle/SBT for dependency resolution and building
# - Handle JAR file installation and wrapper script creation
# - Set proper JAVA_HOME and memory settings
#
# DEPENDENCY MANAGEMENT:
# - Include OpenJDK in build and runtime requirements
# - Most dependencies are bundled in fat JARs or handled by build system
# - Add system dependencies only if needed (rare)
#
# TESTING BEST PRACTICES:
# - Test that applications can execute and show version/help
# - Test basic functionality without complex setup
# - Verify JAR files and wrapper scripts are properly installed
# - Focus on command-line interface rather than internal APIs

context:
  # TODO: Update these variables for your package
  name: example-jvm-package
  version: "1.0.0"
  # GitHub organization or user
  github_org: example-org
  # GitHub repository name (often same as package name)
  github_repo: example-repo
  # Main class for executable JARs (e.g., com.example.Main)
  main_class: com.example.Main
  # Binary name (what users will type to run the program)
  binary_name: example
  # Language: java, kotlin, scala, or mixed
  language: java
  # Build system: maven, gradle, or sbt
  build_system: maven
  # Package type: application (executable) or library
  package_type: application
  # Java version requirement (8, 11, 17, 21, etc.)
  java_version: 17

package:
  name: ${{ name }}
  version: ${{ version }}

source:
  # TODO: Update the URL and sha256 for your package
  url: https://github.com/${{ github_org }}/${{ github_repo }}/archive/refs/tags/v${{ version }}.tar.gz
  sha256: "0000000000000000000000000000000000000000000000000000000000000000"
  # Uncomment if the archive extracts to a non-standard directory
  # target_directory: ${{ github_repo }}-${{ version }}

build:
  # Most JVM applications are platform-independent
  noarch: generic
  number: 0
  script:
    interpreter: nu
    env:
      # Set JAVA_HOME
      JAVA_HOME: ${{ "$PREFIX" if unix else "$LIBRARY_PREFIX" }}
      # Build tool memory settings
      MAVEN_OPTS: "-Xmx2g -XX:+UseG1GC"
      GRADLE_OPTS: "-Xmx2g -XX:+UseG1GC -Dorg.gradle.daemon=false"
      SBT_OPTS: "-Xmx2g -XX:+UseG1GC"
    content: |
      echo $"Building ($env.PKG_NAME) version ($env.PKG_VERSION)..."
      echo $"Language: ${{ language }}, Build system: ${{ build_system }}, Type: ${{ package_type }}"

      # Determine platform-specific paths
      let prefix = if ($nu.os-info.name == "windows") { $env.LIBRARY_PREFIX } else { $env.PREFIX }
      let bin_dir = ($prefix | path join "bin")
      let lib_dir = ($prefix | path join "lib")
      let share_dir = ($prefix | path join "share" ${{ name }})

      # Create directories
      mkdir $bin_dir
      mkdir $lib_dir
      mkdir $share_dir

      # BUILD PATTERN 1: Maven build (most common)
      if ${{ build_system }} == "maven" {
        echo "Building with Maven..."

        # Clean and package
        ^mvn clean package -DskipTests=true -Dmaven.javadoc.skip=true

        # Find the built JAR file
        let jar_files = (ls target | where name =~ '\.jar$' and name !~ 'sources' and name !~ 'javadoc')
        let main_jar = ($jar_files | where name !~ 'original' | get name | first)

        # Install JAR
        cp $"target/($main_jar)" ($lib_dir | path join $"${{ name }}-${{ version }}.jar")

        # Create symlink for easier access
        if ($nu.os-info.name != "windows") {
          ln -sf $"${{ name }}-${{ version }}.jar" ($lib_dir | path join "${{ name }}.jar")
        }
      }

      # BUILD PATTERN 2: Gradle build
      if ${{ build_system }} == "gradle" {
        echo "Building with Gradle..."

        # Build without tests
        ^./gradlew build -x test --no-daemon

        # Find the built JAR file
        let jar_files = (ls build/libs | where name =~ '\.jar$' and name !~ 'sources' and name !~ 'javadoc')
        let main_jar = ($jar_files | get name | first)

        # Install JAR
        cp $"build/libs/($main_jar)" ($lib_dir | path join $"${{ name }}-${{ version }}.jar")

        # Create symlink for easier access
        if ($nu.os-info.name != "windows") {
          ln -sf $"${{ name }}-${{ version }}.jar" ($lib_dir | path join "${{ name }}.jar")
        }
      }

      # BUILD PATTERN 3: SBT build (for Scala)
      if ${{ build_system }} == "sbt" {
        echo "Building with SBT..."

        # Package the application
        ^sbt clean assembly

        # Find the built JAR file
        let jar_files = (ls target/scala-*/| where name =~ '\.jar$')
        let main_jar = ($jar_files | get name | first)

        # Install JAR
        cp $"target/scala-*/($main_jar)" ($lib_dir | path join $"${{ name }}-${{ version }}.jar")

        # Create symlink for easier access
        if ($nu.os-info.name != "windows") {
          ln -sf $"${{ name }}-${{ version }}.jar" ($lib_dir | path join "${{ name }}.jar")
        }
      }

      # For application packages, create wrapper script
      if ${{ package_type }} == "application" {
        echo "Creating wrapper script for application..."

        if ($nu.os-info.name == "windows") {
          # Windows batch script
          let wrapper_content = $"@echo off
setlocal
set JAVA_HOME=(%CONDA_PREFIX%\\Library)
set JAR_PATH=%CONDA_PREFIX%\\Library\\lib\\${{ name }}.jar
\"%JAVA_HOME%\\bin\\java.exe\" ${{ "-cp %JAR_PATH% " + main_class if main_class != "" else "-jar %JAR_PATH%" }} %*
endlocal"
          $wrapper_content | save ($bin_dir | path join "${{ binary_name }}.bat")
        } else {
          # Unix shell script
          let wrapper_content = $"#!/bin/bash
JAVA_HOME=\"$CONDA_PREFIX\"
JAR_PATH=\"$CONDA_PREFIX/lib/${{ name }}.jar\"
exec \"$JAVA_HOME/bin/java\" ${{ "-cp \"$JAR_PATH\" " + main_class if main_class != "" else "-jar \"$JAR_PATH\"" }} \"$@\""
          $wrapper_content | save ($bin_dir | path join ${{ binary_name }})
          chmod +x ($bin_dir | path join ${{ binary_name }})
        }
      }

      # Copy additional resources if they exist
      if ("src/main/resources" | path exists) {
        cp -r src/main/resources/* $share_dir
      }

      # TODO: Add post-installation steps if needed
      # Copy configuration files, documentation, etc.
      # if ("config" | path exists) {
      #   cp -r config/* ($prefix | path join "etc" ${{ name }})
      # }

      echo "JVM package build completed successfully!"

requirements:
  build:
    - nushell
    - openjdk ${{ java_version }}.*
    # TODO: Add build system
    # - maven                     # For Maven builds
    # - gradle                    # For Gradle builds
    # - sbt                       # For SBT/Scala builds

    # TODO: Add other build dependencies if needed
    # - make                      # For complex builds with native components
    # - pkg-config                # For finding system libraries

  host:
    - openjdk ${{ java_version }}.*
    # TODO: Add compile-time dependencies (rare for JVM packages)
    # Most dependencies are handled by Maven/Gradle/SBT

  run:
    - openjdk ${{ java_version }}.*
    # TODO: Add runtime dependencies (rare for JVM packages)
    # Most JVM applications bundle their dependencies
    # Only add if the application requires specific system libraries
    # - fontconfig                # For applications that render fonts
    # - libx11                    # For GUI applications on Linux

tests:
  # Test 1: Verify package contents are included
  - package_contents:
      files:
        # JAR file
        - lib/${{ name }}-${{ version }}.jar

        # TODO: Update based on package type
        # For applications
        - ${{ "Library/" if win }}bin/${{ binary_name }}${{ ".bat" if win }}

        # For libraries (uncomment if applicable)
        # - lib/${{ name }}.jar

        # TODO: Add other expected files
        # - share/${{ name }}/config/
        # - etc/${{ name }}/

  # Test 2: Functional tests
  - requirements:
      build:
        - nushell
    script:
      interpreter: nu
      content:
        # TODO: Update these tests for your specific package

        # For applications - test basic execution
        - ^${{ binary_name }} --version
        - ^${{ binary_name }} --help

        # Test that JAR can be executed directly
        - ^java -jar ($env.PREFIX | path join "lib" "${{ name }}.jar") --version

        # TODO: Add functional tests that verify core functionality
        # Keep tests simple and avoid external dependencies
        # - ^${{ binary_name }} --validate-config /dev/null
        # - ^${{ binary_name }} --dry-run --input test.txt
        # - ^${{ binary_name }} --list-plugins

        # For libraries - test that classes can be loaded
        # - ^java -cp ($env.PREFIX | path join "lib" "${{ name }}.jar") ${{ main_class }} --version

        # Verify the JAR is properly formed
        - ^jar -tf ($env.PREFIX | path join "lib" "${{ name }}.jar") | ^head -10

about:
  # TODO: Update all metadata fields
  homepage: https://github.com/${{ github_org }}/${{ github_repo }}
  repository: https://github.com/${{ github_org }}/${{ github_repo }}
  documentation: https://github.com/${{ github_org }}/${{ github_repo }}/blob/main/README.md
  summary: Brief one-line description of the JVM package
  description: |
    A longer, multi-line description of what this JVM package provides.
    Include key features, use cases, and any important notes.

    Features:
    - Feature 1: Cross-platform JVM compatibility
    - Feature 2: Modern ${{ language }} implementation
    - Feature 3: Easy command-line interface

    This ${{ package_type }} provides functionality for...

    Usage:
    ```bash
    ${{ binary_name }} --help
    ${{ binary_name }} [options] [arguments]
    ```

  # TODO: Update license type (common: MIT, Apache-2.0, GPL-3.0, BSD-3-Clause)
  license: Apache-2.0
  license_file: LICENSE

extra:
  recipe-maintainers:
    # TODO: Add your GitHub username
    - github-username

  version:
    # TODO: Choose appropriate version detection method
    github-tags:
      - ^v(\d+\.\d+\.\d+)$

  # Common JVM packaging notes:
  # - Use noarch: generic for platform-independent JVM packages
  # - Include appropriate OpenJDK version in build and run requirements
  # - Create wrapper scripts for executable applications
  # - Most dependencies are bundled in JAR files by build systems
  # - Test basic execution rather than complex functionality
  # - Handle different build systems (Maven, Gradle, SBT)
  # - Use proper memory settings for build tools
  # - Focus on command-line interface testing
  # - Consider fat JAR vs thin JAR + dependencies approach
