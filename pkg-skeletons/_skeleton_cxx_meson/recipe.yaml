# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json
schema_version: 1

# C++ Meson-based Package Recipe Template
# ========================================
#
# This template provides best practices for packaging C++ projects using Meson build system.
# Based on lessons learned from GTK/GNOME stack packaging and cross-platform compatibility.
#
# MESON BUILD PATTERNS:
# - Use explicit --libdir=lib64 for consistent library placement
# - Handle cross-platform builds with proper prefix detection
# - Use nushell interpreter for cross-platform build scripts
# - Set PKG_CONFIG_PATH for dependency detection
# - Use flexible lib*/ patterns in tests for cross-platform compatibility
#
# BUILD CONSIDERATIONS:
# - Meson handles most configuration automatically
# - Use --prefix to target conda environment
# - Use --libdir=lib64 to ensure consistent library placement across platforms
# - Handle platform-specific paths (Library/ on Windows)
# - Set parallel build jobs for faster compilation
# - Disable features that cause dependency conflicts (introspection, vapi, etc.)
#
# DEPENDENCY MANAGEMENT:
# - Include necessary compilers and meson/ninja in build requirements
# - Add system libraries to host requirements
# - Use pkg-config for library detection
# - Handle complex GTK/GNOME dependency chains carefully
#
# TESTING BEST PRACTICES:
# - Use flexible lib*/ patterns instead of hardcoded lib64/ or lib/
# - Test library files, headers, and pkg-config files
# - Avoid complex script tests that require full environment setup
# - Focus on package_contents tests for reliability

context:
  # TODO: Update these variables for your package
  name: example-cpp-meson
  version: "1.0.0"
  # GitHub organization or user
  github_org: example-org
  # GitHub repository name (often same as package name)
  github_repo: example-repo
  # Library name (for shared library files)
  library_name: example
  # Library version (for .so versioning)
  library_version: "1"
  # Number of parallel build jobs
  nprocs: 4

package:
  name: ${{ name }}
  version: ${{ version }}

source:
  # TODO: Update the URL and sha256 for your package
  url: https://github.com/${{ github_org }}/${{ github_repo }}/archive/refs/tags/v${{ version }}.tar.gz
  sha256: "0000000000000000000000000000000000000000000000000000000000000000"

build:
  number: 0
  script:
    interpreter: nu
    content: |
      echo $"Building ($env.PKG_NAME) version ($env.PKG_VERSION) with Meson..."

      # Set up PKG_CONFIG_PATH for dependency detection
      # This is crucial for meson to find dependencies in conda environments
      $env.PKG_CONFIG_PATH = (
        ($env.BUILD_PREFIX | path join "lib" "pkgconfig") + ":" +
        ($env.PREFIX | path join "lib" "pkgconfig") + ":" +
        ($env.BUILD_PREFIX | path join "lib64" "pkgconfig") + ":" +
        ($env.PREFIX | path join "lib64" "pkgconfig") + ":" +
        ($env.PKG_CONFIG_PATH | default "")
      )

      # Configure with Meson
      # Key lessons from gtksourceview5 packaging:
      # - Use --libdir=lib64 for consistent library placement across platforms
      # - Disable problematic features that cause dependency conflicts
      # - Use --wrap-mode=nofallback to avoid downloading dependencies
      ^meson setup build (
        $"--prefix=($env.PREFIX)" +
        " --libdir=lib64" +
        " --buildtype=release" +
        " --wrap-mode=nofallback" +
        # TODO: Add your project-specific options
        # " -Dintrospection=disabled" +     # Disable if causes conflicts
        # " -Dvapi=false" +                 # Disable Vala bindings if not needed
        # " -Ddocs=false" +                 # Disable documentation generation
        # " -Dtests=false" +                # Disable building tests
        # " -Dexamples=false"               # Disable building examples
      )

      # Build with parallel jobs
      ^meson compile -C build --verbose --jobs ${{ nprocs }}

      # Install
      ^meson install -C build

      # TODO: Add post-installation steps if needed
      # Handle additional files, create symlinks, etc.
      # cp ../config/default.conf ($env.PREFIX | path join "etc" "config.conf")

      echo "Meson build completed successfully!"

requirements:
  build:
    - nushell
    - meson
    - ninja
    - pkgconf                 # Essential for pkg-config detection
    - pkg-config
    - ${{ compiler('c') }}    # C compiler
    - ${{ compiler('cxx') }}  # C++ compiler
    # TODO: Add build-time dependencies
    # Common GNOME/GTK build dependencies:
    # - glib-tools            # For glib schema compilation
    # - gtk4                  # If building GTK4 application
    # - gtk3                  # If building GTK3 application
    # - gobject-introspection # If enabling introspection
    # - vala                  # If enabling Vala bindings

  host:
    # TODO: Add development libraries your package depends on
    # Core system libraries:
    # - glib                  # GLib core library
    # - libglib               # GLib library files
    # - gtk4                  # GTK4 framework
    # - gtk3                  # GTK3 framework
    # - cairo                 # 2D graphics library
    # - pango                 # Text rendering
    # - gdk-pixbuf            # Image loading
    # - libxml2               # XML parsing
    # - fontconfig            # Font configuration
    # - freetype              # Font rendering
    # - harfbuzz              # Text shaping
    # - fribidi               # Unicode bidirectional text
    # - pcre2                 # Regular expressions
    # - zlib                  # Compression
    # - expat                 # XML parsing

  run:
    # TODO: Add runtime dependencies
    # For GUI applications, usually same as host dependencies
    # For libraries, users need the same libraries available
    # Most dependencies are automatically detected by conda
    # Only add explicit runtime deps if needed

tests:
  # Test 1: Verify package contents are included
  - package_contents:
      files:
        # TODO: Update these paths for your specific package

        # Shared library files (use flexible lib*/ pattern for cross-platform)
        - ${{ "Library/" if win }}lib*/lib${{ library_name }}${{ ".dll" if win else ".so*" }}

        # Header files
        - ${{ "Library/" if win }}include/${{ name }}/${{ name }}.h
        # TODO: Add other expected headers
        # - include/${{ name }}/core.h
        # - include/${{ name }}/utils.h

        # pkg-config files (use flexible lib*/ pattern)
        - ${{ "Library/" if win }}lib*/pkgconfig/${{ name }}.pc

        # TODO: Add other expected files
        # Configuration files:
        # - etc/${{ name }}/config.conf
        #
        # Data files:
        # - share/${{ name }}/data/
        #
        # Documentation:
        # - share/man/man1/${{ name }}.1
        #
        # Desktop files (for GUI apps):
        # - share/applications/${{ name }}.desktop
        # - share/icons/hicolor/*/apps/${{ name }}.png
        #
        # GSettings schemas (for GNOME apps):
        # - share/glib-2.0/schemas/org.${{ github_org }}.${{ name }}.gschema.xml
        #
        # Binaries (if package includes executables):
        # - bin/${{ name }}${{ ".exe" if win }}

  # Test 2: Simple functionality test (optional)
  # Keep tests simple to avoid dependency resolution issues
  # - requirements:
  #     build:
  #       - nushell
  #       - pkg-config
  #   script:
  #     interpreter: nu
  #     content: |
  #       # Test that pkg-config can find the library
  #       ^pkg-config --exists ${{ name }}
  #       ^pkg-config --modversion ${{ name }}
  #       echo "âœ“ pkg-config integration works"
  #
  #       # TODO: Add simple functionality tests
  #       # Avoid complex tests that require full environment setup
  #       # Focus on basic smoke tests

about:
  # TODO: Update all metadata fields
  homepage: https://github.com/${{ github_org }}/${{ github_repo }}
  repository: https://github.com/${{ github_org }}/${{ github_repo }}
  documentation: https://github.com/${{ github_org }}/${{ github_repo }}/blob/main/README.md
  summary: Brief one-line description of the C++ library/application
  description: |
    A longer, multi-line description of what this C++ package provides.
    Include key features, use cases, and any important notes.

    Features:
    - Feature 1: Modern C++ implementation with meson build system
    - Feature 2: Cross-platform compatibility (Linux, macOS, Windows)
    - Feature 3: Integration with GNOME/GTK ecosystem (if applicable)

    This package provides a C++ library/application built with meson that can be
    easily integrated into other projects through pkg-config and CMake find_package.

  # TODO: Update license type (common: MIT, Apache-2.0, LGPL-2.1-or-later, GPL-3.0)
  license: MIT
  license_file: LICENSE

extra:
  recipe-maintainers:
    # TODO: Add your GitHub username
    - github-username

  version:
    # TODO: Choose appropriate version detection method
    github-tags:
      - ^v(\d+\.\d+\.\d+)$

  # Meson C++ packaging best practices:
  #
  # BUILD SYSTEM:
  # - Meson is excellent for GNOME/GTK projects and modern C++
  # - Always use --libdir=lib64 for consistent library placement
  # - Set PKG_CONFIG_PATH to help meson find dependencies
  # - Use --wrap-mode=nofallback to avoid downloading dependencies
  # - Disable problematic features (introspection, vapi) if they cause conflicts
  #
  # CROSS-PLATFORM COMPATIBILITY:
  # - Use flexible lib*/ patterns in tests instead of hardcoded lib64/ or lib/
  # - Handle Windows-specific paths with Library/ prefix
  # - Test on multiple platforms (Ubuntu, Fedora, macOS, Windows)
  #
  # DEPENDENCY MANAGEMENT:
  # - Include pkgconf and pkg-config in build requirements
  # - Add glib-tools if using GLib schemas
  # - Be careful with GTK/GNOME dependency chains - they can conflict
  # - Use host requirements for libraries, run requirements sparingly
  #
  # TESTING STRATEGY:
  # - Focus on package_contents tests for reliability
  # - Use flexible file patterns for cross-platform compatibility
  # - Avoid complex script tests that require full environment setup
  # - Test pkg-config integration if library provides .pc files
  #
  # COMMON GOTCHAS:
  # - Different distributions install to lib/ vs lib64/ - use flexible patterns
  # - GTK/GNOME dependencies can conflict - disable problematic features
  # - meson may not find dependencies without proper PKG_CONFIG_PATH
  # - Some features (introspection, vapi) can cause complex dependency issues
