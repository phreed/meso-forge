# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json
schema_version: 1

context:
  # Update version for the R package
  version: "1.0.0"

package:
  # R packages in conda-forge are typically prefixed with "r-"
  # Replace "packagename" with the actual package name (lowercase)
  name: r-packagename
  version: ${{ version }}

source:
  # Most R packages are hosted on CRAN
  url: https://cran.r-project.org/src/contrib/packagename_${{ version }}.tar.gz
  # Alternative sources:
  # For GitHub releases:
  # url: https://github.com/username/packagename/archive/v${{ version }}.tar.gz
  # For Bioconductor packages:
  # url: https://bioconductor.org/packages/release/bioc/src/contrib/packagename_${{ version }}.tar.gz

  # Replace with actual SHA256 hash of the source tarball
  sha256: "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"

build:
  # Build number - increment for recipe changes without version bump
  number: 0

  # For pure R packages (no compiled code), uncomment the following:
  # noarch: generic

  # R packages typically need these rpaths
  dynamic_linking:
    rpath_allowlist: ["lib/R/lib", "lib"]

  # Build script - standard for most R packages
  script:
    - $R CMD INSTALL --build . ${R_ARGS}

  # For packages with configure scripts, you might need:
  # script:
  #   - if: osx
  #     then: export DISABLE_AUTOBREW=1
  #   - $R CMD INSTALL --build . ${R_ARGS}

requirements:
  build:
    # Compilers needed for packages with C/C++/Fortran code
    # Remove if package is pure R
    - if: unix
      then: ${{ compiler('c') }}
    - if: unix
      then: ${{ compiler('cxx') }}
    - if: unix
      then: ${{ compiler('fortran') }}
    - if: win
      then: ${{ compiler('m2w64_c') }}
    - if: win
      then: ${{ compiler('m2w64_cxx') }}
    - if: win
      then: ${{ compiler('m2w64_fortran') }}

    # For cross-compilation
    - if: build_platform != target_platform
      then: cross-r-base {{ r_base }}

    # Uncomment if package uses pkg-config
    # - pkg-config

    # Uncomment if package needs specific build tools
    # - if: unix
    #   then: make
    # - if: unix
    #   then: cmake
    # - if: unix
    #   then: autoconf
    # - if: unix
    #   then: automake

  host:
    # Base R is always required
    - r-base

    # Common R package dependencies - update as needed
    # Remove version constraints if not needed
    # - if: package uses Rcpp
    #   then: r-rcpp
    # - if: package uses RcppArmadillo
    #   then: r-rcpparmadillo
    # - if: package uses RcppEigen
    #   then: r-rcppeigen

    # Example of common tidyverse dependencies
    # - r-dplyr >=1.0.0
    # - r-ggplot2 >=3.0.0
    # - r-tidyr >=1.0.0
    # - r-purrr >=0.3.0
    # - r-tibble >=3.0.0
    # - r-stringr >=1.4.0
    # - r-readr >=1.3.0
    # - r-forcats >=0.5.0

    # Example of statistical packages
    # - r-mass
    # - r-matrix
    # - r-nlme
    # - r-survival

    # System dependencies for packages that need them
    # - if: package needs BLAS
    #   then: libblas
    # - if: package needs LAPACK
    #   then: liblapack
    # - if: package uses XML
    #   then: libxml2
    # - if: package uses curl
    #   then: libcurl
    # - if: package uses openssl
    #   then: openssl
    # - if: package uses GSL
    #   then: gsl
    # - if: package uses FFTW
    #   then: fftw

  run:
    # Base R is always required
    - r-base

    # Runtime dependencies should match host dependencies
    # but typically without version constraints for compilers
    # Copy the r-* dependencies from host section

    # System dependencies needed at runtime
    # Copy relevant system libraries from host section

tests:
  - requirements:
      build:
        - nushell
    script:
      interpreter: nu
      content:
        # Basic test to ensure package can be loaded
        - if ($nu.os-info.name != "windows") { ^$R -e "library('packagename')" }
        - if ($nu.os-info.name != "windows") { ^$R -e "library('packagename'); packageVersion('packagename')" }
        - if ($nu.os-info.name == "windows") { ^"%R%" -e "library('packagename')" }
        - if ($nu.os-info.name == "windows") { ^"%R%" -e "library('packagename'); packageVersion('packagename')" }

        # Additional tests can be added here
        # - if ($nu.os-info.name != "windows") { ^$R -e "library('packagename'); packagename::some_function()" }

  # Alternative: run package tests (if they exist and are fast)
  # - requirements:
  #     build:
  #       - nushell
  #   script:
  #     interpreter: nu
  #     content:
  #       - if ($nu.os-info.name != "windows") { ^$R -e "library('testthat'); library('packagename'); test_check('packagename')" }

about:
  # Update with actual package information
  homepage: https://github.com/username/packagename
  repository: https://github.com/username/packagename
  documentation: https://packagename.readthedocs.io # or other documentation URL

  # Common R package licenses - update as needed
  license: MIT
  # Other common licenses:
  # license: GPL-2.0-or-later
  # license: GPL-3.0-or-later
  # license: BSD-3-Clause
  # license: Apache-2.0
  # license: Artistic-2.0

  license_file:
    - LICENSE
    # Some packages have additional license files
    # - LICENSE.md
    # - LICENCE
    # - COPYING

  # Update with actual package description
  summary: A brief description of what the package does
  description: |
    A longer description of the package functionality.
    This can span multiple lines and provide more detail
    about what the package does and how to use it.

extra:
  recipe-maintainers:
    # Replace with actual maintainer GitHub usernames
    - maintainer1
    - maintainer2

  # Add additional platforms if the package supports them
  additional-platforms:
    - linux-aarch64
    - osx-arm64

  # For packages that need specific skip conditions
  # skip-lints:
  #   - if: source is git
  #     then: missing_hash
  #   - if: package has platform-specific code
  #     then: should_be_noarch_generic

  # For packages with known issues on certain platforms
  # skip:
  #   if: win and match(python, "<3.9")
  #   then: true
