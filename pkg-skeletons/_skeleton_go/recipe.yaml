# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json
schema_version: 1

# Go Package Recipe Template
# =========================
#
# This template provides best practices for packaging Go applications in conda.
# Key lessons learned from real-world Go packaging (especially mediamtx):
#
# VERSION EMBEDDING CHALLENGES:
# - Many Go projects use git-based version embedding (go generate + versiongetter tools)
# - In conda builds, git history isn't available (building from tarballs)
# - This causes version tools to fall back to "v0.0.0" defaults
# - Solutions:
#   1. Create VERSION file before go generate (set uses_git_version: true)
#   2. Use ldflags -X for string variables (not //go:embed []byte)
#   3. Make tests flexible about version strings
#
# GO GENERATE CONSIDERATIONS:
# - Some projects require go generate for embedded assets
# - Version-related generate commands may fail without git
# - Handle VERSION files before running go generate
# - Consider skipping problematic generate commands if needed
#
# TESTING BEST PRACTICES:
# - Test functionality, not exact version strings
# - Version embedding issues are common in conda environments
# - Focus on "does the binary work" rather than "does version match exactly"
# - Avoid strict version equality checks like test "$(cmd --version)" != "v0.0.0"
#
# BUILD OPTIMIZATION:
# - Use CGO_ENABLED=0 for static binaries when possible
# - Include -s -w ldflags for size optimization
# - Collect dependency licenses with go-licenses tool
# - Handle common problematic dependencies in license collection
#
# COMMON PATTERNS:
# - GitHub releases: https://github.com/org/repo/archive/refs/tags/v${{ version }}.tar.gz
# - Version injection: -X main.version=v${{ version }}
# - Binary location: ${{ PREFIX }}/bin/${{ binary_name }}

context:
  # TODO: Update these variables for your package
  name: example-go-package
  version: "1.0.0"
  # GitHub organization or user
  github_org: example-org
  # GitHub repository name (often same as package name)
  github_repo: example-repo
  # Main package path relative to repo root (often ./cmd/[name] or just .)
  main_package: ./cmd/example
  # Binary name (what users will type to run the program)
  binary_name: example
  # Set to true if the project uses go generate and embeds version from git
  uses_git_version: false

package:
  name: ${{ name }}
  version: ${{ version }}

source:
  # TODO: Update the URL and sha256 for your package
  url: https://github.com/${{ github_org }}/${{ github_repo }}/archive/refs/tags/v${{ version }}.tar.gz
  sha256: "0000000000000000000000000000000000000000000000000000000000000000"
  # Uncomment if the archive extracts to a non-standard directory
  # target_directory: src/${{ github_repo }}

build:
  number: 0
  script:
    interpreter: nu
    content: |
      echo $"Building ($env.PKG_NAME) version ($env.PKG_VERSION)..."

      # Change to source directory if using target_directory
      # cd src/${{ github_repo }}

      # Handle version embedding for projects that use git-based versioning
      if ${{ uses_git_version }} {
        # Create VERSION file with correct version before go generate
        # This prevents git-based version tools from writing v0.0.0
        print $"Creating VERSION file with version ($env.PKG_VERSION)..."
        $"v($env.PKG_VERSION)" | save VERSION
      }

      # Run go generate if the project uses it
      # Note: Some projects use go generate for version embedding from git
      # In conda builds, git history isn't available, so we handle this above
      # go generate ./...

      # Set up LDFLAGS for optimized binary
      mut ldflags = ["-s" "-w"]

      # TODO: Add version injection if the program supports it
      # Common patterns for string variables (works with ldflags -X):
      # $ldflags = ($ldflags | append $"-X main.version=v($env.PKG_VERSION)")
      # $ldflags = ($ldflags | append $"-X github.com/(${{ github_org }})/(${{ github_repo }})/internal/version.Version=v($env.PKG_VERSION)")
      # $ldflags = ($ldflags | append $"-X github.com/(${{ github_org }})/(${{ github_repo }})/cmd.Version=v($env.PKG_VERSION)")

      # Note: ldflags -X only works with string variables, not []byte or other types
      # For projects using //go:embed VERSION files, create the VERSION file above instead

      let ldflags_str = ($ldflags | str join " ")

      # Build the binary
      # Use CGO_ENABLED=0 for static binaries without C dependencies
      $env.CGO_ENABLED = "0"
      go build -ldflags $ldflags_str -o $"($env.PREFIX)/bin/(${{ binary_name }})" ${{ main_package }}

      # Collect licenses from all dependencies
      print "Collecting dependency licenses..."
      let license_dir = $"($env.SRC_DIR)/license-files"
      mkdir $license_dir

      # Save licenses, ignoring common problematic packages
      # Add more ignore patterns as needed for your specific dependencies
      (go-licenses save ${{ main_package }}
        --save_path=$license_dir
        --ignore=golang.org/x/sys/unix
        --ignore=golang.org/x/crypto/internal/poly1305
        --ignore=golang.org/x/crypto/salsa20/salsa
        --ignore=golang.org/x/crypto/argon2
        --ignore=golang.org/x/crypto/blake2b
        --ignore=golang.org/x/sys/cpu
        --ignore=golang.org/x/crypto/sha3
        --ignore=github.com/ugorji/go/codec
        --ignore=github.com/benburkert/openpgp
        | complete | ignore)

requirements:
  build:
    - nushell
    # Choose the appropriate Go compiler:
    # For static binaries without C dependencies (recommended):
    - ${{ compiler('go-nocgo') }}
    # For binaries that need to link against C libraries:
    # - ${{ compiler('go-cgo') }}
    # - ${{ compiler('c') }}  # Only needed with go-cgo

    # Tool for collecting dependency licenses
    - go-licenses

    # TODO: Add other build dependencies if needed
    # - make
    # - cmake

tests:
  - requirements:
      build:
        - nushell
    script:
      interpreter: nu
      content:
        # TODO: Update these tests for your specific binary
        # Basic functionality tests - focus on behavior, not strict version strings
        # Many Go projects have version embedding issues in conda builds

        # Test that version command works (doesn't crash)
        - ^${{ binary_name }} --version

        # Test help command works
        - ^${{ binary_name }} --help

        # If you need to verify specific version content, be flexible:
        # Check that version contains some expected pattern, not exact match
        # - ^${{ binary_name }} --version | ^grep -E "(v?[0-9]+\.[0-9]+\.[0-9]+|${{ version }})"

        # Avoid overly strict version checks like this (learned from mediamtx):
        # - test "$({{ binary_name }} --version)" != "v0.0.0"  # Too strict!

        # TODO: Add functional tests that verify the program actually works
        # - ^${{ binary_name }} subcommand --flag
        # - ^${{ binary_name }} --config /dev/null --check-config

about:
  # TODO: Update all metadata fields
  homepage: https://github.com/${{ github_org }}/${{ github_repo }}
  repository: https://github.com/${{ github_org }}/${{ github_repo }}
  documentation: https://github.com/${{ github_org }}/${{ github_repo }}/blob/main/README.md
  summary: Brief one-line description of the package
  description: |
    A longer, multi-line description of what this package does.
    Include key features, use cases, and any important notes.
  # TODO: Update license type (common: MIT, Apache-2.0, GPL-3.0, BSD-3-Clause)
  license: MIT
  license_file:
    - LICENSE
    # Include collected dependency licenses
    - license-files/

extra:
  recipe-maintainers:
    # TODO: Add your GitHub username
    - github-username

  # Common Go packaging notes:
  # - For projects using git-based version embedding (go generate + versiongetter tools),
  #   set uses_git_version: true and handle VERSION file creation
  # - ldflags -X only works with string variables, not []byte from //go:embed
  # - Test functionality rather than exact version strings to avoid build environment issues
  # - Use CGO_ENABLED=0 for static binaries when possible
  # - Include comprehensive license collection for all dependencies
