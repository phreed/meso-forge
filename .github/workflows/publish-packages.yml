name: Publish packages (CI)

# This workflow publishes built conda packages to the repository
#
# Trigger Strategy:
# - Manual execution: Always available via workflow_dispatch (requires build run_id)
# - Automatic execution: Only when pushing to the 'publish' branch
# - For push triggers, the workflow will fail and require manual re-execution with run_id
# - The 'publish' branch should be used to signal readiness to publish packages
# - Manual execution is the primary method - provides build run_id to download artifacts

# this is important for trusted publishing
permissions:
  id-token: write

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: "Build workflow run ID from which to download artifacts"
        required: true
        type: string
  push:
    branches:
      - publish

jobs:
  publish:

    strategy:
      matrix:
        include:
          - { target: linux-64, os: ubuntu-24.04 }
          - { target: linux-aarch64, os: ubuntu-24.04 }
          # - { target: win-64, os: windows-latest }
          # - { target: osx-64, os: macos-13 }
          # - { target: osx-arm64, os: macos-14 }
      fail-fast: false

    name: Publish ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - uses: prefix-dev/setup-pixi@v0.8.10
        with:
          pixi-version: v0.47.0
          cache: true
          log-level: vvv
          run-install: true
          # https://github.com/prefix-dev/setup-pixi?tab=readme-ov-file#token
          auth-host: prefix.dev
          auth-token: ${{ secrets.PREFIX_DEV_TOKEN }}

      - name: Debug workflow run information
        run: |
          echo "=== Workflow Run Debug Information ==="
          echo "Event name: ${{ github.event_name }}"
          echo "Manual run ID input: ${{ inputs.run_id }}"
          echo "Target platform: ${{ matrix.target }}"
          echo "Artifact name: packages-${{ matrix.target }}"
          echo "Repository: ${{ github.repository }}"

          # For push events, require that run_id is provided
          if [[ "${{ github.event_name }}" == "push" ]]; then
            if [ -z "${{ inputs.run_id }}" ]; then
              echo "ERROR: For push events, this workflow must be manually triggered with a build run ID"
              echo "Please manually trigger this workflow and provide the run_id input"
              exit 1
            fi
          fi

      - name: List available artifacts from build run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_ID: ${{ inputs.run_id }}
        run: |
          echo "=== Available Artifacts from Run ID: $RUN_ID ==="
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts" | \
            jq '.artifacts[] | {name: .name, size_in_bytes: .size_in_bytes, created_at: .created_at}' || echo "Failed to fetch artifacts"

      - name: Download build artifacts
        uses: actions/download-artifact@v4 # Use v4 or a later version
        with:
          name: packages-${{ matrix.target }}
          path: output/
          run_id: ${{ inputs.run_id }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find output -name "*.conda" -type f | head -20
          echo "Total .conda files: $(find output -name "*.conda" -type f | wc -l)"

      - name: Publish packages
        env:
          TARGET_PLATFORM: ${{ matrix.target }}
        run: pixi run publish-pd

  publish-summary:
    name: Publish Summary
    runs-on: ubuntu-latest
    needs: publish
    if: always()
    steps:
      - name: Check publish results
        run: |
          echo "Publish jobs completed with the following results:"
          echo "Publish job status: ${{ needs.publish.result }}"

          if [[ "${{ needs.publish.result }}" == "failure" ]]; then
            echo "❌ Some publishes failed"
            exit 1
          elif [[ "${{ needs.publish.result }}" == "success" ]]; then
            echo "✅ All packages published successfully"
          else
            echo "⚠️ Publish completed with status: ${{ needs.publish.result }}"
          fi
