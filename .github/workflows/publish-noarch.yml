name: Publish noarch packages (CI)

# This workflow publishes built noarch conda packages to the repository
#
# Trigger Strategy:
# - Manual execution: Always available via workflow_dispatch (requires build run_id)
# - Automatic execution: Only when pushing to the 'publish' branch
# - For push triggers, the workflow will fail and require manual re-execution with run_id
# - The 'publish' branch should be used to signal readiness to publish packages
# - Manual execution is the primary method - provides build run_id to download artifacts

# this is important for trusted publishing
permissions:
  id-token: write

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: "Build workflow run ID from which to download artifacts"
        required: false
        type: string
  push:
    branches:
      - publish

jobs:
  publish:
    name: Publish noarch packages
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get latest successful run_id of 'build-noarch.yml' on 'build' branch
        uses: actions/github-script@v7
        id: get_run_id # Give it an ID to access its outputs
        with:
          result-encoding: json # To correctly handle output
          script: |
            // Test workflow_dispatch input run_id
            const inputRunId = context.payload.inputs && context.payload.inputs.run_id;
            if (inputRunId && inputRunId.trim() !== '') {
              console.log(`Manual run ID provided: ${inputRunId}`);
              core.setOutput('run_id', inputRunId);
              return;
            }
            console.log('No manual run ID provided');
            const workflow_id = 'build-noarch.yml';
            const branch = 'build';

            try {
              // Get only the latest one
              const response = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id,
                branch,
                status: 'success',
                per_page: 1,
              });
              const runs = response.data.workflow_runs;

              if (runs.length < 1) {
                console.log(`No successful runs found for ${workflow_id} on ${branch}.`);
                core.setOutput('run_id', ''); // Output an empty string or handle as needed
                return;
              }
              const latestRunId = runs[0].id;
              console.log(`Latest successful run_id for ${workflow_id} on ${branch}: ${latestRunId}`);
              core.setOutput('run_id', latestRunId);
            }
            catch (error) {
              console.error(`Error fetching workflow runs: ${error}`);
              core.setOutput('run_id', ''); // Output an empty string or handle as needed
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Or a PAT with appropriate permissions

      - name: Free up disk space
        run: |
          echo "Disk space before cleanup:"
          df -h
          sudo rm -rf /opt/hostedtoolcache
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/share/swift
          echo "Disk space after cleanup:"
          df -h

      - uses: prefix-dev/setup-pixi@v0.8.14
        with:
          pixi-version: v0.47.0
          cache: true
          log-level: vvv
          run-install: true
          # https://github.com/prefix-dev/setup-pixi?tab=readme-ov-file#token
          auth-host: prefix.dev
          auth-token: ${{ secrets.PREFIX_DEV_TOKEN }}

      - name: Download build artifacts
        if: ${{ steps.get_run_id.outputs.run_id != '' }}
        uses: actions/download-artifact@v4 # Use v4 or a later version
        with:
          name: packages-noarch
          path: output/
          run-id: ${{ steps.get_run_id.outputs.run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find output -name "*.conda" -type f | head -20
          echo "Total .conda files: $(find output -name "*.conda" -type f | wc -l)"

      - name: Publish noarch packages
        run: pixi run publish-pd

  publish-summary:
    name: Publish Summary
    runs-on: ubuntu-latest
    needs: publish
    if: always()
    steps:
      - name: Check publish results
        run: |
          echo "Publish jobs completed with the following results:"
          echo "Publish job status: ${{ needs.publish.result }}"

          if [[ "${{ needs.publish.result }}" == "failure" ]]; then
            echo "❌ Noarch package publish failed"
            exit 1
          elif [[ "${{ needs.publish.result }}" == "success" ]]; then
            echo "✅ All noarch packages published successfully"
          else
            echo "⚠️ Noarch publish completed with status: ${{ needs.publish.result }}"
          fi
